View(complexFeaturesFiltered)
# plot 26S proteasome
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "1193",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "126",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "1097",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "95",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "1092",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "563",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "112;33",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "112;33",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
# plot 26S proteasome
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "193",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "193",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
knitr::opts_chunk$set(echo = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "193",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "193",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
knitr::opts_chunk$set(echo = TRUE)
require(CCprofiler)
require(reshape2)
require(data.table)
require('R.utils')
require(reshape2)
require(tidyr)
require(dplyr)
str="'importPCPdata()'"
# that is to write "R-code in text" and explain it
str_2="'importFromOpenSWATH()'"
# that is to write "R-code in text" and explain it
df<- fread(input = "feature_alignment.csv",data.table = T,showProgress = T)
# reformat OSW
df$filename <- gsub(pattern = "\\.mzXML\\.gz",replacement = "",x = df$filename)
df$ProteinName <- paste("1/",df$ProteinName,sep = "")
df$ProteinName  <- gsub(pattern = "1/DECOY_",replacement = "DECOY_1/",df$ProteinName)
# remove SEC-input from the feature_alignment.csv output
df <- as.data.table(df[df$filename != "vmatej_I190208_129",])
# create fraction annotation
Annotation_txt<- data.table(filename = unique(df$filename), fraction_number = 1:60)
# load MW calibration curve
std_elu_fractions <- c(12,19,26,33,39,46)
std_weights_kDa <- c(1340,670,300,150,44,17)
cal_Table <- as.data.table(cbind(std_weights_kDa,std_elu_fractions))
calibration_new = calibrateMW(cal_Table)
pepTraces <- importFromOpenSWATH(data = df,
annotation_table = Annotation_txt,
rm_requantified = TRUE,
MS1Quant = F,
verbose = T,
rm_decoys = F)
pepTraces <- annotateMolecularWeight(pepTraces,
calibration_new)
pepTraces_cons <- filterConsecutiveIdStretches(traces = pepTraces,
min_stretch_length = 3)
pepTraces_cons_sib <- filterBySibPepCorr(traces = pepTraces_cons,
fdr_cutoff = NULL,
absolute_spcCutoff = 0.2,
plot = TRUE)
protTraces <- proteinQuantification(pepTraces_cons_sib,
topN = 2,
keep_less = FALSE,
rm_decoys = TRUE)
complexHypotheses <- corumComplexHypotheses
binaryHypotheses <- generateBinaryNetwork(complexHypotheses)
pathLength <- calculatePathlength(binaryHypotheses)
corumTargetsPlusDecoys <- generateComplexDecoys(target_hypotheses=complexHypotheses,
dist_info=pathLength,
min_distance = 2,
append=TRUE)
complexFeatures <- findComplexFeatures(traces=protTraces,
complex_hypothesis = corumTargetsPlusDecoys)
complexFeaturesScored <- calculateCoelutionScore(complexFeatures)
qvalueComplexFeaturesScored <- calculateQvalue(complexFeaturesScored)
qvalueComplexFeaturesScoredStats <- qvaluePositivesPlot(qvalueComplexFeaturesScored)
complexFeaturesFiltered <- subset(qvalueComplexFeaturesScored, qvalue <= 0.05)
summarizeFeatures(complexFeaturesFiltered)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "193",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
plotFeatures(feature_table = complexFeaturesFiltered,
traces = protTraces,
feature_id = "112;33",
annotation_label="Entry_name",
calibration = calibration_new,
peak_area = TRUE)
pepTraces$fraction_annotation$molecular_weight
write.table(pepTraces$fraction_annotation$molecular_weight, sep="\t")
write.table('fraction.txt',pepTraces$fraction_annotation$molecular_weight, sep="\t")
write.table('fraction.txt', as.data.frame(pepTraces$fraction_annotation$molecular_weight), sep="\t")
kk = as.data.frame(pepTraces$fraction_annotation$molecular_weight)
View(kk)
write.table(kk, 'calibration.txt',sep="\t")
k = rnorm(100)
l = seq(1,100)
l = k* l
l = seq(1,100)
apply(l, 1, function(x) {cov(k*x, k)})
apply(l, 1, function(x) {cov(k*x, k)})
sapply(l, function(x) {cov(k*x, k)})
plot(sapply(l, function(x) {cov(k*x, k)}))
library(ggsci)
scale_colour_npg()
kk=scale_colour_npg()
View(kk)
library(ggsci)
pal_npg(10)
pal_npg()
pal_npg(6)
pal_npg(4)
pal_npg()
scale_color_d3(palette=pal_npg)
scale_color_d3(palette=pal_npg())
scale_color_d3(palette=pal_npg(5))
pal_npg('a', 'b', 'c')
pal_npg(c('a', 'b', 'c'))
pal_npg(5)
library(ggplot2)
l<-read.delim('Desktop/GAN_fdr/osw_features_panhuman_img2828.txt')
installed <- as.data.frame(installed.packages())
write.csv(installed, 'installed_previously.csv')
p.val <- 1-pchisq(200, df = 32)
p
p.val <- 1-pchisq(2, df = 32)
p.val <- 1-pchisq(20, df = 32)
knitr::opts_chunk$set(echo = TRUE)
source("functs_af.R")
require(seqinr)
require(ggplot2)
require(pheatmap)
require(reshape2)
require(ggsci)
theme_Publication<-function(base_size=9, base_family='sans') {
library(grid)
library(ggthemes)
(theme_foundation(base_family=base_family)
+ theme(plot.title = element_text(face = "plain",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
axis.title = element_text(face = "plain",size = 9),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(size=6),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.spacing = unit(0, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="plain"),
legend.text=element_text(size=7),
legend.title=element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5)
))
}
rmback<-
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(strip.background =element_rect(fill="white"))
sessionInfo()
l<-c(0.1, 0.1,0.2)
l2 = l*2
cor(l,l2)
cor(l*1000,l2*50)
l2 = c(0.5,0.1,0.1)
cor(l, l2)
cor(l/(l+l2), l2/(l+l2))
l
l
l2
cor(l,l2)
cor(l/(l+l2), l/(l+l2))
cor(l/(l+l2), l2/(l+l2))
cor(l/(l+1), l2/(l+1))
cor(l/(5), l2/(5))
l+l2
l1 = l2
remove(l1, l2)
l1 = c(2,2,3)
l2 = c(4,4,5)
h1 = l1+10
h2 = l2+5
cor(l1, l2)
cor(h1, h2)
cor(h1/(l1+h1), h2/(l2+h2))
l1
l2
l1 = c(2,3,4)
l2 = c(4,5,6)
h1 = l1+10
h2 = l2+5
cor(l1, l2)
cor(h1, h2)
cor(h1/(l1+h1), h2/(l2+h2))
l1 = rnorm(3)
l2 = rnorm(3)
h1 = rnorm(3)
h2 = rnorm(3)
cor(l1, l2)
cor(h1, h2)
cor(h1/(l1+h1), h2/(l2+h2))
l1
l2
h1
h3
h2
l1 = abs(rnorm(243))
l2 = abs(rnorm(243))
h1 = abs(rnorm(243))
h2 = abs(rnorm(243))
cor(l1, l2)
cor(h1, h2)
cor(h1/(l1+h1), h2/(l2+h2))
var(h1//(l1+h1))
var(h1/(l1+h1))
var(h1)
sd(0.1,0.2,0.1)
sd(c(0.1,0.2,0.1))
sd(c(0.1,0.2,0.1)*1000)
scale_colour_Publication()
View(scale_colour_Publication)
View(theme_Publication)
iris
knitr::opts_chunk$set(echo = TRUE)
base = ggplot(iris, aes(x=Sepal.Length, y?Sepal.Width, color=Species))+geom_point()
library(ggsci)
library(ggsci)
library(ggplot2)
dummy = iris
base = ggplot(dummy, aes(x=Sepal.Length, y?Sepal.Width, color=Species))+geom_point()
base
base = ggplot(dummy, aes(x=Sepal.Length, y=Sepal.Width, color=Species))+geom_point()
base
theme_publication<-function(base_size=9, base_family='sans') {
library(grid)
library(ggthemes)
(theme_foundation(base_family=base_family)
+ theme(plot.title = element_text(face = "plain",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
axis.title = element_text(face = "plain",size = 9),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(size=6),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.spacing = unit(0, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="plain"),
legend.text=element_text(size=7),
legend.title=element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5)
))
}
base + theme_publication() + scale_colour_npg()
setwd('Desktop/Github/anfoss.github.io/_jupyter/covidml/')
l<-read.delim('log2fc.txt')
l2<-read.delim('test_metabolites.txt')
View(l2)
View(l)
mlt<-merge(l, l2, by.y='feature', by.x='ids')
View(mlt)
View(mlt)
l<-read.delim('log2fc.txt', sep="\t")
l$meta<-ifelse(l$meta==0, 'Metabolite', 'Protein')
p<- ggplot(l, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p <- p +geom_vline(xintercept = c(-1.5, 1.5), linetype='dashed')
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
p<-p + scale_colour_brewer(palette='Paired')+xlim(-3,3)
p<- ggplot(mlt, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p <- p +geom_vline(xintercept = c(-1.5, 1.5), linetype='dashed')
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
p<-p + scale_colour_brewer(palette='Paired')+xlim(-3,3)
library(ggsci)
library(ggplot2)
library(cowplot)
theme_publication<-function(base_size=9, base_family='sans') {
library(grid)
library(ggthemes)
(theme_foundation(base_family=base_family)
+ theme(plot.title = element_text(face = "plain",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
axis.title = element_text(face = "plain",size = 9),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(size=6),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.spacing = unit(0, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="plain"),
legend.text=element_text(size=7),
legend.title=element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=.5)
))
}
rmback<-
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(strip.background =element_rect(fill="white"))
p<- ggplot(mlt, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p <- p +geom_vline(xintercept = c(-1.5, 1.5), linetype='dashed')
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
p<-p + scale_colour_brewer(palette='Paired')+xlim(-3,3)
p
sapply(mlt, class)
View(mlt)
ggplot(mlt, aes(importance, fc))
ggplot(mlt, aes(importance, fc))+geom_point()
ggplot(mlt, aes(y=importance, x=fc))+geom_point()
ggplot(mlt, aes(y=importance, x=fc))+geom_point(aes(col=-log10(pvalue)))
p<- ggplot(mlt, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p
p <- p +geom_vline(xintercept = c(-1.5, 1.5), linetype='dashed')
p
p<- ggplot(mlt, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
p
p<-p + scale_colour_brewer(palette='Paired')+xlim(-3,3)
p
l$meta<-ifelse(l$meta==0, 'Metabolite', 'Protein')
p<- ggplot(mlt, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
p<-p + scale_colour_brewer(palette='Blues')+xlim(-3,3)
p
p<- ggplot(mlt, aes(x=fc, y=importance))+geom_point(aes(col=-log10(pvalue)))
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
p<-p+xlim(-3,3)
ggsave(filename = 'fc_importance.pdf', plot = p, device = 'pdf', width = 3.5, height = 3.5)
ggsave(filename = 'fc_importance.pdf', plot = p, device = 'pdf', width = 4, height = 4)
p<- ggplot(mlt, aes(x=fc, y=-log10(pvalue))+geom_point(aes(col=fc))
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
# p<-p+xlim(-3,3)
p
p<- ggplot(mlt, aes(x=fc, y=-log10(pvalue)))+geom_point(aes(col=fc))
p <- p+ theme_publication()+rmback + xlab('Log2FC (Severe/Non severe)') + ylab('Feature importance')
# p<-p+xlim(-3,3)
o
p
p<- ggplot(mlt, aes(x=-log10(pvalue), y=importance))+geom_point(aes(col=fc))
p <- p+ theme_publication()+rmback + xlab('-log10(BH adj p)') + ylab('Feature importance')
p
# need a divergent color palette
p<- p+ scale_colour_viridis_c()
p
library(ggsci)
library(ggplot2)
library(cowplot)
theme_publication<-function(base_size=9, base_family='sans') {
library(grid)
library(ggthemes)
(theme_foundation(base_family=base_family)
+ theme(plot.title = element_text(face = "plain",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
axis.title = element_text(face = "plain",size = 9),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(size=6),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.spacing = unit(0, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="plain"),
legend.text=element_text(size=7),
legend.title='Fold change',
panel.border = element_rect(colour = "black", fill=NA, size=.5)
))
}
p<- ggplot(mlt, aes(x=-log10(pvalue), y=importance))+geom_point(aes(col=fc))
p <- p+ theme_publication()+rmback + xlab('-log10(BH adj p)') + ylab('Feature importance')
library(ggsci)
library(ggplot2)
library(cowplot)
theme_publication<-function(base_size=9, base_family='sans') {
library(grid)
library(ggthemes)
(theme_foundation(base_family=base_family)
+ theme(plot.title = element_text(face = "plain",
size = rel(1.2), hjust = 0.5),
text = element_text(),
panel.background = element_rect(colour = NA),
plot.background = element_rect(colour = NA),
axis.title = element_text(face = "plain",size = 9),
axis.title.y = element_text(angle=90,vjust =2),
axis.title.x = element_text(vjust = -0.2),
axis.text = element_text(size=6),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.ticks = element_line(),
panel.grid.major = element_line(colour="#f0f0f0"),
panel.grid.minor = element_blank(),
legend.key = element_rect(colour = NA),
legend.position = "bottom",
legend.direction = "horizontal",
legend.key.size= unit(0.2, "cm"),
legend.spacing = unit(0, "cm"),
plot.margin=unit(c(10,5,5,5),"mm"),
strip.background=element_rect(colour="#f0f0f0",fill="#f0f0f0"),
strip.text = element_text(face="plain"),
legend.text=element_text(size=7),
panel.border = element_rect(colour = "black", fill=NA, size=.5)
))
}
p<- ggplot(mlt, aes(x=-log10(pvalue), y=importance))+geom_point(aes(col=fc))
p <- p+ theme_publication()+rmback + xlab('-log10(BH adj p)') + ylab('Feature importance')
# need a divergent color palette add legend title
p<- p+ scale_colour_viridis_c()
ggsave(filename = 'pv_importance.pdf', plot = p, device = 'pdf', width = 4, height = 4)
